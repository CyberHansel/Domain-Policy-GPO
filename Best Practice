* Do Not Modify the Default Domain Policy:
  - The Default Domain Policy should only contain account policy settings (e.g., password policy, account lockout policy, Kerberos policy). Avoid adding other settings here.

* Do Not Modify the Default Domain Controller Policy:
  - The Default Domain Controller Policy should focus on User Rights Assignment and Audit Policy. 
  - For other domain controller settings, create separate GPOs linked to the Domain Controller Organizational Unit (OU).

* Good Organizational Unit (OU) Design:
  - Organize your objects into OUs based on functionality or department.
  - Separate users and computers into distinct OUs. For example: Users OU: Apply user policies, Computers OU: Apply computer policies.

* Avoid Setting GPOs at the Domain Level:
  - Except for the Default Domain Policy, avoid setting GPOs directly at the domain level.


* Apply GPOs at the Root OU Level:
  - Link GPOs at the root of an OU to allow inheritance down the hierarchy.
  - This avoids the need to link policies to each individual OU.

* Always use security filtering for GPOs
  - Use GPO Security Filtering to exclude specific OUs or user groups if necessary. 

 =================================================
windows logrotate script and security practice
* Script Location: Store your script in a secure directory (e.g., C:\Scripts or a custom folder). Avoid placing scripts in system directories or shared locations.
* Permissions: Read-Only for Everyone: Set read-only permissions for everyone except administrators. Modify for Administrators: Only administrators should have write/modify permissions.
* Signing Scripts: Digitally sign your script using a code-signing certificate. This ensures that the script hasnâ€™t been tampered with.
* Logging and Auditing: Log script execution (e.g., to Windows Event Logs or a separate log file). Or changes mby?
* Execution Policy:  Set the PowerShell execution policy to restrict unauthorized script execution. Use Set-ExecutionPolicy Restricted or Set-ExecutionPolicy RemoteSigned.
* To ensure your script runs after system restarts:
      1.) Scheduled Task: Create a scheduled task that runs the script at startup.
          Set the task to run with appropriate credentials (e.g., a service account).
          Trigger the task on system startup.
      2.) Service: Convert your script into a Windows service.
          Requires more complex setup but provides better control and reliability.
          Use tools like NSSM (Non-Sucking Service Manager) to create a service from your script.
